{"version":3,"sources":["actions/listsActions.js","actions/cardsActions.js","actions/index.js","reducers/listsReducer.js","reducers/index.js","store/index.js","components/TrelloDeleteCardButton.js","components/TrelloCard.js","components/TrelloActionButton.js","components/TrelloDeleteButton.js","components/TrelloList.js","components/App.js","serviceWorker.js","index.js"],"names":["addList","title","type","CONSTANTS","ADD_LIST","payload","deleteList","listId","DELETE_LIST","sort","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggableId","DRAG_HAPPENED","addCard","listID","text","ADD_CARD","deleteCard","cardID","DELETE_CARD","browserState","JSON","parse","localStorage","getItem","initialState","id","uuidv4","cards","createdAt","Date","listsReducer","state","arguments","length","undefined","action","newList","concat","Object","toConsumableArray","filteredList","filter","list","setItem","stringify","newCard","newState","map","objectSpread","updatedState","updatedCards","card","_action$payload","splice","apply","_list$cards","find","_listEnd$cards","combineReducers","lists","composed","applyMiddleware","thunkMiddleware","store","createStore","rootReducer","DeleteButton","styled","div","_templateObject","TrelloDeleteCardButton","handleDeleteCard","_this$props","_this","props","dispatch","renderDeleteCardButton","react_default","a","createElement","onClick","Icon","this","Component","connect","CardContainer","TrelloCard_templateObject","TitleContainer","_templateObject2","TrelloCard","_ref","index","react_beautiful_dnd_esm","String","provided","assign","ref","innerRef","draggableProps","dragHandleProps","Card","CardContent","Typography","gutterBottom","components_TrelloDeleteCardButton","TrelloActionButton","formOpen","openForm","setState","closeForm","e","handleAddList","handleAddCard","handleInputChange","target","value","renderAddButton","buttonText","buttontextOpacity","buttonTextColor","buttonTextBackground","style","styles","openFormButtonGroup","opacity","color","backgroundColor","renderForm","placeholder","buttonTitle","overflow","minHeight","minWidth","padding","react_textarea_autosize_esm_browser","autoFocus","onBlur","onChange","resize","width","outline","border","formButtonGroup","Button","onMouseDown","variant","marginLeft","cursor","display","alignItems","borderRadius","height","paddingLeft","marginTop","TrelloDeleteButton_templateObject","TrelloDeleteButton","handleDeleteList","renderDeleteButton","TrelloDeleteButton_DeleteButton","ListContainer","TrelloList_templateObject","TrelloList_templateObject2","humanizeDateTime","date","datetimeDiff","Math","floor","TrelloList","_useState","useState","_useState2","slicedToArray","lastEdited","setLastEditedDate","useEffect","la","reduce","acc","rec","interval","setInterval","clearInterval","droppableId","TrelloList_TitleContainer","components_TrelloDeleteButton","components_TrelloCard","key","components_TrelloActionButton","App_templateObject","App","onDragEnd","result","destination","source","direction","App_ListContainer","droppableProps","components_TrelloList","Boolean","window","location","hostname","match","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2a839ba4.chunk.js","sourcesContent":["import { CONSTANTS } from '.';\r\n\r\nexport const addList = title => {\r\n  return {\r\n    type: CONSTANTS.ADD_LIST,\r\n    payload: title\r\n  };\r\n};\r\nexport const deleteList = listId =>  {\r\n   return { type: CONSTANTS.DELETE_LIST, listId }}\r\n\r\n\r\nexport const sort = (\r\n  droppableIdStart,\r\n  droppableIdEnd,\r\n  droppableIndexStart,\r\n  droppableIndexEnd,\r\n  draggableId,\r\n  type\r\n) => {\r\n  return {\r\n    type: CONSTANTS.DRAG_HAPPENED,\r\n    payload: {\r\n      droppableIdStart,\r\n      droppableIdEnd,\r\n      droppableIndexStart,\r\n      droppableIndexEnd,\r\n      draggableId,\r\n      type\r\n    }\r\n  };\r\n};\r\n","import { CONSTANTS } from '.';\r\n\r\nexport const addCard = (listID, text) => {\r\n  return {\r\n    type: CONSTANTS.ADD_CARD,\r\n    payload: { text, listID }\r\n  };\r\n};\r\n\r\nexport const deleteCard = (cardID, listID) => {\r\n  return {\r\n    type: CONSTANTS.DELETE_CARD, \r\n    payload: {cardID, listID} \r\n  };\r\n};","export * from './listsActions';\r\nexport * from './cardsActions';\r\n\r\nexport const CONSTANTS = {\r\n  ADD_CARD: 'ADD_CARD',\r\n  ADD_LIST: 'ADD_LIST',\r\n  DELETE_CARD: 'DELETE_CARD',\r\n  DELETE_LIST: 'DELETE_LIST',\r\n  DRAG_HAPPENED: 'DRAG_HAPPENED'\r\n};\r\n","import { CONSTANTS } from '../actions';\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\n\r\n\r\nconst browserState = JSON.parse(localStorage.getItem('lastEdited')) \r\nconst initialState = [\r\n  {\r\n    title: 'Backlog',\r\n    id: uuidv4(),\r\n    cards: [\r\n      {\r\n        id: uuidv4(),\r\n        text: 'to create the newCardForm',\r\n        createdAt: +new Date()\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        text: 'to make an authorization form and cabinet',\r\n        createdAt: +new Date()\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: 'In Progress',\r\n    id: uuidv4(),\r\n    cards: [\r\n      {\r\n        id: uuidv4(),\r\n        text: 'first step in Progress..',\r\n        createdAt: +new Date()\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\n\r\nconst listsReducer = (state = browserState||initialState, action) => {\r\n  switch (action.type) {\r\n    case CONSTANTS.ADD_LIST:\r\n      const newList = {\r\n        title: action.payload,\r\n        cards: [],\r\n        id: uuidv4()\r\n      };\r\n      \r\n      return [...state, newList];\r\n\r\n    case CONSTANTS.DELETE_LIST:\r\n      const filteredList = state.filter(list => list.id !== action.listId)\r\n      localStorage.setItem('lastEdited', JSON.stringify(filteredList))\r\n      return filteredList\r\n\r\n    case CONSTANTS.ADD_CARD: {\r\n      const newCard = {\r\n        text: action.payload.text,\r\n        id: uuidv4(),\r\n        createdAt: +new Date()\r\n      };\r\n      \r\n      const newState = state.map(list => {\r\n        if (list.id === action.payload.listID) {\r\n          return {\r\n            ...list,\r\n            cards: [...list.cards, newCard]\r\n            \r\n          };\r\n          \r\n        } else {\r\n          return list;\r\n        }\r\n      });\r\n      \r\n      localStorage.setItem('lastEdited', JSON.stringify(newState))\r\n      \r\n      return newState;\r\n    }\r\n\r\n    case CONSTANTS.DELETE_CARD:\r\n      \r\n    \r\n    const updatedState = state.map(list => {\r\n      if (list.id === action.payload.listID) {\r\n        const updatedCards = list.cards.filter(card => card.id !== action.payload.cardID)\r\n        return {\r\n          ...list,\r\n          cards: [...updatedCards]\r\n          \r\n        };\r\n        \r\n      } else {\r\n        return list;\r\n      }\r\n    });\r\n    localStorage.setItem('lastEdited', JSON.stringify(updatedState))\r\n    return updatedState\r\n    \r\n\r\n\r\n    case CONSTANTS.DRAG_HAPPENED:\r\n      const {\r\n        droppableIdStart,\r\n        droppableIdEnd,\r\n        droppableIndexStart,\r\n        droppableIndexEnd,\r\n        type  \r\n      } = action.payload;\r\n\r\n      const newState = [...state];\r\n\r\n      // dragging lists around - the listOrderReducer should handle this\r\n      if (type === \"list\") {\r\n        const list = newState.splice(droppableIndexStart, 1);\r\n        newState.splice(droppableIndexEnd, 0, ...list);\r\n        return newState;\r\n      }\r\n      //In the same list\r\n      if (droppableIdStart === droppableIdEnd) {\r\n        const list = state.find(list => droppableIdStart === list.id);\r\n        const card = list.cards.splice(droppableIndexStart, 1);\r\n        list.cards.splice(droppableIndexEnd, 0, ...card);\r\n      }\r\n\r\n      // other list\r\n      if (droppableIdStart !== droppableIdEnd) {\r\n        // find the list where the drag happened\r\n        const listStart = state.find(list => droppableIdStart === list.id);\r\n        // pull out the card from this list\r\n        const card = listStart.cards.splice(droppableIndexStart, 1);\r\n        // find the list where the drag ended\r\n        const listEnd = state.find(list => droppableIdEnd === list.id);\r\n        // put the card in the new list\r\n        listEnd.cards.splice(droppableIndexEnd, 0, ...card);\r\n      }\r\n      return newState;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default listsReducer;\r\n","import {combineReducers} from \"redux\";\r\nimport listsReducer from './listsReducer';\r\n\r\n\r\nexport default combineReducers({\r\n    lists: listsReducer\r\n});","import {createStore, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"../reducers\";\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\nconst composed = applyMiddleware(thunkMiddleware)\r\nconst store = createStore(rootReducer, composed);\r\n\r\nexport default store\r\n","import React, { Component } from 'react';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { connect } from 'react-redux';\r\nimport { deleteCard } from '../actions';\r\nimport styled from 'styled-components';\r\n\r\nconst DeleteButton = styled.div`\r\ncursor: pointer;\r\ncolor: gray\r\n`\r\n\r\nclass TrelloDeleteCardButton extends Component {\r\n  state = {};\r\n\r\n\r\nhandleDeleteCard = () => {\r\n     const { dispatch, id, listID } = this.props;\r\n      dispatch(deleteCard(id, listID));\r\n };\r\n\r\n   \r\n  renderDeleteCardButton = () => {\r\n    \r\n    return (\r\n      <DeleteButton\r\n        onClick={ this.handleDeleteCard }\r\n      >\r\n        <Icon>delete</Icon>\r\n        \r\n      </DeleteButton>\r\n    );\r\n  };\r\n\r\n  \r\n  render() {\r\n    return this.renderDeleteCardButton();\r\n  }\r\n}\r\n\r\n\r\nexport default connect()(TrelloDeleteCardButton);\r\n","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport styled from 'styled-components';\r\nimport  TrelloDeleteCardButton  from './TrelloDeleteCardButton'\r\n\r\nconst CardContainer = styled.div`\r\n  margin-bottom: 8px;\r\n`;\r\nconst TitleContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0 12px;\r\n  `\r\n\r\nconst TrelloCard = ({ text, id, listID, index, createdAt }) => {\r\n  \r\n  return (\r\n    <Draggable draggableId={String(id)} index={index}>\r\n      {provided => (\r\n        <CardContainer>\r\n          <div\r\n            ref={provided.innerRef}\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n          >\r\n            <Card>\r\n              <CardContent>\r\n                <TitleContainer>\r\n                  <Typography gutterBottom>{text}</Typography>\r\n                  <TrelloDeleteCardButton\r\n                    listID={listID} \r\n                    id={id}\r\n                    />\r\n                </TitleContainer>\r\n                <Typography>Last modified: {createdAt}</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </CardContainer>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default TrelloCard;\r\n","import React, { Component } from 'react';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport Card from '@material-ui/core/Card';\r\nimport Textarea from 'react-textarea-autosize';\r\nimport Button from '@material-ui/core/Button';\r\nimport { connect } from 'react-redux';\r\nimport { addList, addCard } from '../actions';\r\n\r\nclass TrelloActionButton extends Component {\r\n  state = {\r\n    formOpen: false,\r\n    text: ''\r\n  };\r\n\r\n  openForm = () => {\r\n    this.setState({\r\n      formOpen: true\r\n    });\r\n  };\r\n\r\n  closeForm = e => {\r\n    this.setState({\r\n      formOpen: false\r\n    });\r\n  };\r\n\r\n  handleAddList = () => {\r\n    const { dispatch } = this.props;\r\n    const { text } = this.state;\r\n\r\n    if (text) {\r\n      this.setState({\r\n        text: ''\r\n      });\r\n      dispatch(addList(text));\r\n    }\r\n    return;\r\n  };\r\n\r\n  handleAddCard = () => {\r\n    const { dispatch, listID } = this.props;\r\n    const { text } = this.state;\r\n\r\n    if (text) {\r\n      this.setState({\r\n        text: ''\r\n      }); \r\n      dispatch(addCard(listID, text));\r\n    }\r\n    return;\r\n  };\r\n  handleInputChange = e => {\r\n    this.setState({\r\n      text: e.target.value\r\n    });\r\n  };\r\n\r\n  renderAddButton = () => {\r\n    const { list } = this.props;\r\n\r\n    const buttonText = list ? ' Add another list' : 'Add another card';\r\n    const buttontextOpacity = list ? 1 : 0.5;\r\n    const buttonTextColor = list ? 'white' : 'inherit';\r\n    const buttonTextBackground = list ? 'rgba(0,0,0,.15' : 'inherit';\r\n\r\n    return (\r\n      <div\r\n        onClick={this.openForm}\r\n        style={{\r\n          ...styles.openFormButtonGroup,\r\n          opacity: buttontextOpacity,\r\n          color: buttonTextColor,\r\n          backgroundColor: buttonTextBackground\r\n        }}\r\n      >\r\n        <Icon>add</Icon>\r\n        <p>{buttonText}</p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderForm = () => {\r\n    const { list } = this.props;\r\n\r\n    const placeholder = list\r\n      ? 'Enter list title..'\r\n      : 'Enter a title for this card...';\r\n    const buttonTitle = list ? 'Add List' : 'Add Card';\r\n\r\n    return (\r\n      <div>\r\n        <Card\r\n          style={{\r\n            overflow: 'visible',\r\n            minHeight: 80,\r\n            minWidth: 272,\r\n            padding: '6px 8px 2px'\r\n          }}\r\n        >\r\n          <Textarea\r\n            placeholder={placeholder}\r\n            autoFocus\r\n            onBlur={this.closeForm}\r\n            value={this.state.text}\r\n            onChange={this.handleInputChange}\r\n            style={{\r\n              resize: 'none',\r\n              width: '100%',\r\n              overflow: 'hidden',\r\n              outline: 'none',\r\n              border: 'none'\r\n            }}\r\n          />\r\n        </Card>\r\n        <div style={styles.formButtonGroup}>\r\n          <Button\r\n            onMouseDown={list ? this.handleAddList : this.handleAddCard}\r\n            variant=\"contained\"\r\n            style={{ color: 'white', backgroundColor: '#5aac44' }}\r\n          >\r\n            {buttonTitle}\r\n          </Button>\r\n          <Icon style={{ marginLeft: 8, cursor: 'pointer' }}>close</Icon>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return this.state.formOpen ? this.renderForm() : this.renderAddButton();\r\n  }\r\n}\r\nconst styles = {\r\n  openFormButtonGroup: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    cursor: 'pointer',\r\n    borderRadius: 3,\r\n    height: 36,\r\n    width: 272,\r\n    paddingLeft: 10\r\n  },\r\n  formButtonGroup: {\r\n    marginTop: 8,\r\n    display: 'flex',\r\n    alignItems: 'center'\r\n  }\r\n};\r\n\r\nexport default connect()(TrelloActionButton);\r\n","import React, { Component } from 'react';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { connect } from 'react-redux';\r\nimport { deleteList } from '../actions';\r\nimport styled from 'styled-components';\r\n\r\nconst DeleteButton = styled.div`\r\ncursor: pointer;\r\ncolor: gray\r\n`\r\n\r\nclass TrelloDeleteButton extends Component {\r\n  state = {};\r\n\r\n\r\n  handleDeleteList = () => {\r\n    const { dispatch, id } = this.props;\r\n      dispatch(deleteList(id));\r\n  };\r\n\r\n\r\n \r\n  renderDeleteButton = () => {\r\n    \r\n    return (\r\n      <DeleteButton\r\n      onClick={ this.handleDeleteList }\r\n        \r\n      >\r\n        <Icon>close</Icon>\r\n        \r\n      </DeleteButton>\r\n    );\r\n  };\r\n\r\n  \r\n  render() {\r\n    return this.renderDeleteButton();\r\n  }\r\n}\r\n\r\n\r\nexport default connect()(TrelloDeleteButton);\r\n","import React, { useEffect, useState } from 'react';\r\nimport TrelloCard from './TrelloCard';\r\nimport TrelloActionButton from './TrelloActionButton';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport styled from 'styled-components';\r\nimport TrelloDeleteButton from './TrelloDeleteButton';\r\n\r\n\r\nconst ListContainer = styled.div`\r\n  background: rgba(255, 255, 255, 0.75);\r\n  border-radius: 5px;\r\n  width: 300px;\r\n  height: 100%;\r\n  margin-right: 8px;\r\n  padding: 8px;\r\n`;\r\nconst TitleContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0 12px;\r\n  `\r\n\r\n  const humanizeDateTime = ( date, currentDate = +new Date() ) => {\r\n \r\n    const datetimeDiff = currentDate - date;\r\n    if (datetimeDiff < 60000) {\r\n          return 'just a moment ago';\r\n        }\r\n    else if(datetimeDiff < 3600000){\r\n      return `${Math.floor(datetimeDiff/60000)} minutes ago`\r\n    }\r\n    else if(datetimeDiff < 3600000){\r\n      return `${Math.floor(datetimeDiff/3600000)} hours ago`\r\n    }\r\n    else return 'Long time ago...'\r\n  }\r\n\r\nconst TrelloList = ({ title, cards, listID, index }) => {\r\n\r\n  const [lastEdited, setLastEditedDate] = useState([])\r\n   \r\n    \r\n\r\n    useEffect(() => {\r\n    const la = cards.reduce((acc, rec) => ([...acc, { ...rec, createdAt: humanizeDateTime(rec.createdAt)}]),[])\r\n    setLastEditedDate(la)\r\n    const interval = setInterval(() => {\r\n      setLastEditedDate(cards.reduce((acc, rec) => ([...acc, { ...rec, createdAt: humanizeDateTime(rec.createdAt)}]),[]));\r\n    }, 60000);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n    }, [cards]);\r\n  \r\n\r\n  return (\r\n    <Draggable draggableId={String(listID)} index={index}>\r\n      {provided => (\r\n        <ListContainer\r\n          {...provided.draggableProps}\r\n          ref={provided.innerRef}\r\n          {...provided.dragHandleProps}\r\n        >\r\n          <Droppable droppableId={String(listID)}>\r\n            {provided => (\r\n              <div {...provided.dragHandleProps} ref={provided.innerRef}>\r\n                <TitleContainer>\r\n                  <h2>{title}</h2>\r\n                  <TrelloDeleteButton \r\n                  id={listID}\r\n                  />\r\n                </TitleContainer>\r\n                \r\n                {lastEdited && lastEdited.map((card, index) => (\r\n                  <TrelloCard\r\n                    key={card.id}\r\n                    text={card.text}\r\n                    createdAt={card.createdAt}\r\n                    id={card.id}\r\n                    listID={listID}\r\n                    index={index}\r\n                  />\r\n                ))}\r\n                <TrelloActionButton listID={listID} />\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </ListContainer>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default TrelloList;\r\n","import React, { Component } from 'react';\r\nimport TrelloList from './TrelloList';\r\nimport { connect } from 'react-redux';\r\nimport TrelloActionButton from './TrelloActionButton';\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\nimport { sort } from '../actions';\r\nimport styled from 'styled-components';\r\n\r\nconst ListContainer = styled.div`\r\n  margin: 8px;\r\n  padding: 8px;\r\n  border-radius: 5px;\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\n\r\nclass App extends Component {\r\n  onDragEnd = result => {\r\n    const { destination, source, draggableId, type } = result;\r\n\r\n    if (!destination) {\r\n      return;\r\n    }\r\n    this.props.dispatch(\r\n      sort(\r\n        source.droppableId,\r\n        destination.droppableId,\r\n        source.index,\r\n        destination.index,\r\n        draggableId,\r\n        type\r\n      )\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { lists } = this.props;\r\n\r\n    return (\r\n      <DragDropContext onDragEnd={this.onDragEnd}>\r\n        <div>\r\n          <Droppable droppableId=\"all-lists\" direction=\"horizontal\" type=\"list\">\r\n            {provided => (\r\n              <ListContainer\r\n                {...provided.droppableProps}\r\n                ref={provided.innerRef}\r\n              >\r\n                {lists.map((list, index) => (\r\n                  <TrelloList\r\n                    listID={list.id}\r\n                    key={list.id}\r\n                    title={list.title}\r\n                    cards={list.cards}\r\n                    index={index}\r\n                  />\r\n                ))}\r\n                {provided.placeholder}\r\n                <TrelloActionButton list />\r\n              </ListContainer>\r\n            )}\r\n          </Droppable>\r\n        </div>\r\n      </DragDropContext>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  lists: state.lists\r\n});\r\n\r\nexport default connect(mapStateToProps)(App);\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}